<!DOCTYPE html>
<html lang="en-US">
<head>
<title>Node.js - Interview Questions - Tutorialspoint</title>
<meta charset="utf-8">
<meta name="description" content="Node.js - Interview Questions - Dear readers, these Node.JS Interview Questions have been designed specially to get you acquainted with the nature of questions you may encounter during your in"/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/nodejs/nodejs_interview_questions.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<link rel="stylesheet" href="/themes/css/style-min-v1.css?v=2.0.3">
<script src="/themes/js/script-min-v1.js?v=2.0.0"></script>
<script>function printPage() { window.print(); }</script>
<script data-cfasync="false" type="text/javascript">(function(w, d) { var s = d.createElement('script'); s.src = '//cdn.adpushup.com/40046/adpushup.js'; s.type = 'text/javascript'; s.async = true; (d.getElementsByTagName('head')[0] || d.getElementsByTagName('body')[0]).appendChild(s); })(window, document);</script>
<script data-cfasync="false" type="text/javascript">(function(w, d) { var s = d.createElement('script'); s.src = '//delivery.adrecover.com/18107/adRecover.js'; s.type = 'text/javascript'; s.async = true; (d.getElementsByTagName('head')[0] || d.getElementsByTagName('body')[0]).appendChild(s); })(window, document);</script>
<style>
.right-menu .mui-btn {
    background-color:#82af25;
}
a.demo {
    background:#82af25;
}
li.heading {
    background:#82af25;
}
.course-box{background:#82af25}
.home-intro-sub p{color:#82af25}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/nodejs/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="search-form" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.php"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary mobile-menu" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.php"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/nodejs/images/nodejs-mini-logo.jpg" alt="Node.js Tutorial" />
</div>
<ul class="toc chapters">
<li><a class="videolink" href="/nodejs_online_training/index.asp" target="_blank"><img src="/nodejs/images/nodejs-video-tutorials.jpg" alt="Node.js Video Tutorials" /></a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Node.js Tutorial</li>
<li><a href="/nodejs/index.htm">Node.js - Home</a></li>
<li><a href="/nodejs/nodejs_introduction.htm">Node.js - Introduction</a></li>
<li><a href="/nodejs/nodejs_environment_setup.htm">Node.js - Environment Setup</a></li>
<li><a href="/nodejs/nodejs_first_application.htm">Node.js - First Application</a></li>
<li><a href="/nodejs/nodejs_repl_terminal.htm">Node.js - REPL Terminal</a></li>
<li><a href="/nodejs/nodejs_npm.htm">Node.js - Package Manager (NPM)</a></li>
<li><a href="/nodejs/nodejs_callbacks_concept.htm">Node.js - Callbacks Concept</a></li>
<li><a href="/nodejs/nodejs_event_loop.htm">Node.js - Event Loop</a></li>
<li><a href="/nodejs/nodejs_event_emitter.htm">Node.js - Event Emitter</a></li>
<li><a href="/nodejs/nodejs_buffers.htm">Node.js - Buffers</a></li>
<li><a href="/nodejs/nodejs_streams.htm">Node.js - Streams</a></li>
<li><a href="/nodejs/nodejs_file_system.htm">Node.js - File System</a></li>
<li><a href="/nodejs/nodejs_global_objects.htm">Node.js - Global Objects</a></li>
<li><a href="/nodejs/nodejs_utility_module.htm">Node.js - Utility Modules</a></li>
<li><a href="/nodejs/nodejs_web_module.htm">Node.js - Web Module</a></li>
<li><a href="/nodejs/nodejs_express_framework.htm">Node.js - Express Framework</a></li>
<li><a href="/nodejs/nodejs_restful_api.htm">Node.js - RESTFul API</a></li>
<li><a href="/nodejs/nodejs_scaling_application.htm">Node.js - Scaling Application</a></li>
<li><a href="/nodejs/nodejs_packaging.htm">Node.js - Packaging</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Node.js Useful Resources</li>
<li><a href="/nodejs/nodejs_quick_guide.htm">Node.js - Quick Guide</a></li>
<li><a href="/nodejs/nodejs_useful_resources.htm">Node.js - Useful Resources</a></li>
<li><a href="/nodejs/nodejs_discussion.htm">Node.js - Dicussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
<div id="stickyparent">
<div style="height:250px;width:300px;" id="sticky-ad">
<div id="430c9911-782f-495d-88f9-69f58ca8c9a4" class="_ap_apex_ad" >
<script>
var adpushup = adpushup || {};
adpushup.que = adpushup.que || [];
adpushup.que.push(function() {
adpushup.triggerAd("430c9911-782f-495d-88f9-69f58ca8c9a4");
});
</script>
</div>
</div>
</div>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>Node.js - Interview Questions</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align:center" class="google-top-ads">
<div id="adp_top_ads" style="text-align:center !important;"></div>
<script>
     var adPos = document.getElementById('adp_top_ads');
     var ad_id_720 = "8014640d-fd34-4b2e-9b1b-cc67234a2325";
     var ad_id_650 = "2d1bb2c4-eb72-471d-9c80-1bf5514728c1";
     var ad_id_300 = "df94a1a9-ae2f-432d-9a92-d93823ff4503";
     var width = window.innerWidth;
     var ad_id = ad_id_720;
     if( width <= 768 ){
        ad_id =  ad_id_300;
     }else if( width <= 1435 ){
        ad_id =  ad_id_650;
     }
     adPos.innerHTML = '<div id="' + ad_id + '" class="_ap_apex_ad"></div>';
     var adpushup = adpushup || {};
     adpushup.que = adpushup.que || [];
     adpushup.que.push(function() {
     adpushup.triggerAd(ad_id);
     });
</script>
</div>
<br>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="index.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="index.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<p>Dear readers, these <b>Node.JS Interview Questions</b> have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of <b>Node.JS</b>. As per my experience good interviewers hardly plan to ask any particular question during your interview, normally questions start with some basic concept of the subject and later they continue based on further discussion and what you answer:</p>
<section class="toggle">
<label> What is Node.js?</label>
<div class="toggle-content">
<p> Node.js is a web application framework built on Google Chrome's JavaScript Engine(V8 Engine).</p>
<p> Node.js comes with  runtime environment on which a Javascript based script can be interpreted and executed (It is analogus to JVM to JAVA byte code). This runtime allows to execute a JavaScript code on any machine outside a browser. Because of this runtime of Node.js, JavaScript is now can be executed on server as well.</p>
<p> Node.js also provides a rich library of various javascript modules which eases the developement of web application using Node.js to great extents.</p>
<p><center>Node.js = Runtime Environment + JavaScript Library</center></p>
</div>
</section>
<section class="toggle">
<label> What do you mean by Asynchronous API? </label>
<div class="toggle-content">
<p> All APIs of Node.js library are aynchronous that is non-blocking. It essentially means a Node.js based server never waits for a API to return data. Server moves to next API after calling it and a notification mechanism of Events of Node.js helps server to get response from the previous API call. </p>
</div>
</section>
<section class="toggle">
<label> What are the benefits of using Node.js? </label>
<div class="toggle-content">
<p> Following are main benefits of using Node.js </p>
<ul class="list">
<li><p><b>Asynchronous and Event Driven</b>All APIs of Node.js library are asynchronous that is non-blocking. It essentially means a Node.js based server never waits for a API to return data. Server moves to next API after calling it and a notification mechanism of Events of Node.js helps server to get response from the previous API call.</p></li>
<li><p><b>Very Fast</b> Being built on Google Chrome's V8 JavaScript Engine, Node.js library is very fast in code execution.</p></li>
<li><p><b>Single Threaded but highly Scalable</b> &minus; Node.js uses a single threaded model with event looping. Event mechanism helps server to respond in a non-bloking ways and makes server highly scalable as opposed to traditional servers which create limited threads to handle requests. Node.js uses a single threaded program and same program can services much larger number of requests than traditional server like Apache HTTP Server.</p></li>
<li><p><b>No Buffering</b> &minus; Node.js applications never buffer any data. These applications simply output the data in chunks.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label> Is it free to use Node.js? </label>
<div class="toggle-content">
<p> Yes! Node.js is released under the <a href="https://raw.githubusercontent.com/joyent/node/v0.12.0/LICENSE">MIT license</a> and is free to use. </p>
</div>
</section>
<section class="toggle">
<label> Is Node a single threaded application? </label>
<div class="toggle-content">
<p> Yes! Node uses a single threaded model with event looping.</p>
</div>
</section>
<section class="toggle">
<label> What is REPL in context of Node? </label>
<div class="toggle-content">
<p>REPL stands for Read Eval Print Loop and it represents a computer environment like a window console or unix/linux shell where a command is entered and system responds with an output. Node.js or Node comes bundled with a REPL environment. It performs the following desired tasks.</p>
<ul class="list">
<li><p><b>Read</b> &minus; Reads user's input, parse the input into JavaScript data-structure and stores in memory.</p></li>
<li><p><b>Eval</b> &minus; Takes and evaluates the data structure</p></li>
<li><p><b>Print</b> &minus; Prints the result</p></li>
<li><p><b>Loop</b> &minus; Loops the above command until user press ctrl-c twice.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label> Can we evaluate simple expression using Node REPL </label>
<div class="toggle-content">
<p> Yes.</p>
</div>
</section>
<section class="toggle">
<label> What is the difference of using var and not using var in REPL while dealing with variables? </label>
<div class="toggle-content">
<p>Use variables to store values and print later. if var keyword is not used then value is stored in the variable and printed. Whereas if var keyword is used then value is stored but not printed. You can use both variables later.</p>
</div>
</section>
<section class="toggle">
<label> What is the use of Underscore variable in REPL? </label>
<div class="toggle-content">
<p>Use <b>_</b> to get the last result.</p>
<pre class="result notranslate">
C:\Nodejs_WorkSpace&gt;node
&gt; var x = 10
undefined
&gt; var y = 20
undefined
&gt; x + y
30
&gt; var sum = _
undefined
&gt; console.log(sum)
30
undefined
&gt;
</pre>
</div>
</section>
<section class="toggle">
<label> What is npm? </label>
<div class="toggle-content">
<p>npm stands for Node Package Manager. npm provides following two main functionalities:</p>
<ul class="list">
<li><p>Online repositories for node.js packages/modules which are searchable on <a href="http://search.nodejs.org" alt="node js repositories">search.nodejs.org</a></p></li>
<li><p>Command line utility to install packages, do version management and dependency management of  Node.js packages.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label> What is global installation of dependencies? </label>
<div class="toggle-content">
<p>Globally installed packages/dependencies are stored in <b>&lt;user-directory&gt;</b>/npm directory. Such dependencies can be used in CLI (Command Line Interface) function of any node.js but can not be imported using require() in Node application directly. To install a Node project globally use -g flag.</p>
<pre class="result notranslate">
C:\Nodejs_WorkSpace&gt;npm install express -g
</pre>
</div>
</section>
<section class="toggle">
<label> What is local installation of dependencies? </label>
<div class="toggle-content">
<p>By default, npm installs any dependency in the local mode. Here local mode refers to the package installation in node_modules directory lying in the folder where Node application is present. Locally deployed packages are accessible via require(). To install a Node project locally following is the syntax.</p>
<pre class="result notranslate">
C:\Nodejs_WorkSpace&gt;npm install express
</pre>
</div>
</section>
<section class="toggle">
<label> How to check the already installed dependencies which are globally installed using npm? </label>
<div class="toggle-content">
<p> Use the following command &minus;</p>
<pre class="result notranslate">
C:\Nodejs_WorkSpace&gt;npm ls -g
</pre>
</div>
</section>
<section class="toggle">
<label> What is Package.json? </label>
<div class="toggle-content">
<p>package.json is present in the root directory of any Node application/module and is used to define the properties of a package.</p>
</div>
</section>
<section class="toggle">
<label> Name some of the attributes of package.json? </label>
<div class="toggle-content">
<p>Following are the attributes of Package.json</p>
<ul class="list">
<li><p><b>name</b> &minus; name of the package</p></li>
<li><p><b>version</b> &minus; version of the package</p></li>
<li><p><b>description</b> &minus; description of the package</p></li>
<li><p><b>homepage</b> &minus; homepage of the package</p></li>
<li><p><b>author</b> &minus; author of the package</p></li>
<li><p><b>contributors</b> &minus; name of the contributors to the package</p></li>
<li><p><b>dependencies</b> &minus; list of dependencies. npm automatically installs all the dependencies mentioned here in the node_module folder of the package.</p></li>
<li><p><b>repository</b> &minus; repository type and url of the package</p></li>
<li><p><b>main</b> &minus; entry point of the package</p></li>
<li><p><b>keywords</b> &minus; keywords</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label> How to uninstall a dependency using npm?</label>
<div class="toggle-content">
<p>Use following command to uninstall a module.</p>
<pre class="result notranslate">
C:\Nodejs_WorkSpace&gt;npm uninstall dependency-name
</pre>
</div>
</section>
<section class="toggle">
<label> How to update a dependency using npm?</label>
<div class="toggle-content">
<p>Update package.json and change the version of the dependency which to be updated and run the following command.</p>
<pre class="result notranslate">
C:\Nodejs_WorkSpace&gt;npm update
</pre>
</div>
</section>
<section class="toggle">
<label> What is Callback? </label>
<div class="toggle-content">
<p>Callback is an asynchronous equivalent for a function. A callback function is called at the completion of a given task. Node makes heavy use of callbacks. All APIs of Node are written is such a way that they supports callbacks. For example, a function to read a file may start reading file and return the control to execution environment immidiately so that next instruction can be executed. Once file I/O is complete, it will call the callback function while passing the callback function, the content of the file as parameter. So there is no blocking or wait for File I/O. This makes Node.js highly scalable, as it can process high number of request without waiting for any function to return result.</p>
</div>
</section>
<section class="toggle">
<label> What is a blocking code?</label>
<div class="toggle-content">
<p> If application has to wait for some I/O operation in order to complete its execution any further then the code responsible for waiting is known as blocking code.</p>
</div>
</section>
<section class="toggle">
<label> How Node prevents blocking code?</label>
<div class="toggle-content">
<p> By providing callback function. Callback function gets called whenever corresponding event triggered.</p>
</div>
</section>
<section class="toggle">
<label> What is Event Loop?</label>
<div class="toggle-content">
<p>Node js is a single threaded application but it support concurrency via concept of event and callbacks. As every API of Node js are asynchronous and being a single thread, it uses async function calls to maintain the concurrency. Node uses observer pattern. Node thread keeps an event loop and whenever any task get completed, it fires the corresponding event which signals the event listener function to get executed.</p>
</div>
</section>
<section class="toggle">
<label> What is Event Emmitter? </label>
<div class="toggle-content">
<p>EventEmitter class lies in <b>events</b> module. It is accessibly via following syntax &minus;</p>
<pre class="prettyprint notranslate">
//import events module
var events = require('events');

//create an eventEmitter object
var eventEmitter = new events.EventEmitter();
</pre>
<p>When an EventEmitter instance faces any error, it emits an 'error' event. When new listener is added, 'newListener' event is fired and when a listener is removed, 'removeListener' event is fired.</p>
<p>EventEmitter provides multiple properties like <b>on</b> and <b>emit</b>. <b>on</b> property is used to bind a function with the event and <b>emit</b> is used to fire an event.</p>
</div>
</section>
<section class="toggle">
<label> What is purpose of Buffer class in Node? </label>
<div class="toggle-content">
<p>Buffer class is a global class and can be accessed in application without importing buffer module. A Buffer is a kind of an array of integers and corresponds to a raw memory allocation outside the V8 heap. A Buffer cannot be resized.</p>
</div>
</section>
<section class="toggle">
<label> What is Piping in Node? </label>
<div class="toggle-content">
<p>Piping is a mechanism to connect output of one stream to another stream. It is normally used to get data from one stream and to pass output of that stream to another stream. There is no limit on piping operations. Consider the above example, where we've read test.txt using readerStream and write test1.txt using writerStream. Now we'll use the piping to simplify our operation or reading from one file and writing to another file.</p>
</div>
</section>
<section class="toggle">
<label> Which module is used for file based operations? </label>
<div class="toggle-content">
<p> fs module is used for file based operations.</p>
<pre class="result notranslate">
var fs = require("fs")
</pre>
</div>
</section>
<section class="toggle">
<label> Which module is used for buffer based operations? </label>
<div class="toggle-content">
<p> buffer module is used for buffer based operations.</p>
<pre class="result notranslate">
var buffer = require("buffer")
</pre>
</div>
</section>
<section class="toggle">
<label> Which module is used for web based operations? </label>
<div class="toggle-content">
<p> http module is used for web based operations.</p>
<pre class="result notranslate">
var http = require("http")
</pre>
</div>
</section>
<section class="toggle">
<label> fs module provides both synchronous as well as asynchronous methods.</label>
<div class="toggle-content">
<p> true.</p>
</div>
</section>
<section class="toggle">
<label> What is difference between synchronous and asynchronous method of fs module?  </label>
<div class="toggle-content">
<p>Every method in fs module have synchronous as well as asynchronous form. Asynchronous methods takes a last parameter as completion function callback and first parameter of the callback function is error. It is preferred to use asynchronous method instead of synchronous method as former never block the program execution where the latter one does.</p>
</div>
</section>
<section class="toggle">
<label> Name some of the flags used in read/write operation on files. </label>
<div class="toggle-content">
<p>flags for read/write operations are following:</p>
<ul class="list">
<li><p><b>r</b> &minus; Open file for reading. An exception occurs if the file does not exist.</p></li>
<li><p><b>r+</b> &minus; Open file for reading and writing. An exception occurs if the file does not exist.</p></li>
<li><p><b>rs</b> &minus; Open file for reading in synchronous mode. Instructs the operating system to bypass the local file system cache. This is primarily useful for opening files on NFS mounts as it allows you to skip the potentially stale local cache. It has a very real impact on I/O performance so don't use this flag unless you need it. Note that this doesn't turn fs.open() into a synchronous blocking call. If that's what you want then you should be using fs.openSync()</p></li>
<li><p><b>rs+</b> &minus; Open file for reading and writing, telling the OS to open it synchronously. See notes for 'rs' about using this with caution.</p></li>
<li><p><b>w</b> &minus; Open file for writing. The file is created (if it does not exist) or truncated (if it exists).</p></li>
<li><p><b>wx</b> &minus; Like 'w' but fails if path exists.</p></li>
<li><p><b>w+</b> &minus; Open file for reading and writing. The file is created (if it does not exist) or truncated (if it exists).</p></li>
<li><p><b>wx+</b> &minus; Like 'w+' but fails if path exists.</p></li>
<li><p><b>a</b> &minus; Open file for appending. The file is created if it does not exist.</p></li>
<li><p><b>ax</b> &minus; Like 'a' but fails if path exists.</p></li>
<li><p><b>a+</b> &minus; Open file for reading and appending. The file is created if it does not exist.</p></li>
<li><p><b>ax+'</b> &minus; Like 'a+' but fails if path exists.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label> What are streams? </label>
<div class="toggle-content">
<p> Streams are objects that let you read data from a source or write data to a destination in continuous fashion. </p>
</div>
</section>
<section class="toggle">
<label> How many types of streams are present in Node. </label>
<div class="toggle-content">
<p>In Node.js, there are four types of streams.</p>
<ul class="list">
<li><p><b>Readable</b> &minus; Stream which is used for read operation.</p></li>
<li><p><b>Writable</b> &minus; Stream which is used for write operation.</p></li>
<li><p><b>Duplex</b> &minus; Stream which can be used for both read and write operation.</p></li>
<li><p><b>Transform</b> &minus; A type of duplex stream where the output is computed based on input.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label> Name some of the events fired by streams. </label>
<div class="toggle-content">
<p>Each type of Stream is an <b>EventEmitter</b> instance and throws several events at different instance of times. For example, some of the commonly used events are:</p>
<ul class="list">
<li><p><b>data</b> &minus; This event is fired when there is data is available to read.</p></li>
<li><p><b>end</b> &minus; This event is fired when there is no more data to read.</p></li>
<li><p><b>error</b> &minus; This event is fired when there is any error receiving or writing data.</p></li>
<li><p><b>finish</b> &minus; This event is fired when all data has been flushed to underlying system</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label> What is Chaining in Node? </label>
<div class="toggle-content">
<p>Chanining is a mechanism to connect output of one stream to another stream and create a chain of multiple stream operations. It is normally used with piping operations.</p>
</div>
</section>
<section class="toggle">
<label> How will you open a file using Node? </label>
<div class="toggle-content">
<p>Following is the syntax of the method to open a file in asynchronous mode:</p>
<pre class="prettyprint notranslate">
fs.open(path, flags[, mode], callback)
</pre>
<h3>Parameters</h3>
<p>Here is the description of the parameters used:</p>
<ul class="list">
<li><p><b>path</b> &minus; This is string having file name including path.</p></li>
<li><p><b>flags</b> &minus; Flag tells the behavior of the file to be opened. All possible values have been mentioned below.</p></li>
<li><p><b>mode</b> &minus; This sets the file mode (permission and sticky bits), but only if the file was created. It defaults to 0666, readable and writeable.</p></li>
<li><p><b>callback</b> &minus; This is the callback function which gets two arguments (err, fd).</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label> How will you read a file using Node? </label>
<div class="toggle-content">
<p>Following is the syntax of one of the methods to read from a file:</p>
<pre class="prettyprint notranslate">
fs.read(fd, buffer, offset, length, position, callback)
</pre>
<p>This method will use file descriptor to read the file, if you want to read file using file name directly then you should use another method available.</p>
<h3>Parameters</h3>
<p>Here is the description of the parameters used &minus;</p>
<ul class="list">
<li><p><b>fd</b> &minus; This is the file descriptor returned by file fs.open() method.</p></li>
<li><p><b>buffer</b> &minus; This is the buffer that the data will be written to.</p></li>
<li><p><b>offset</b> &minus; This is the offset in the buffer to start writing at.</p></li>
<li><p><b>length</b> &minus; This is an integer specifying the number of bytes to read.</p></li>
<li><p><b>position</b> &minus; This is an integer specifying where to begin reading from in the file. If position is null, data will be read from the current file position.</p></li>
<li><p><b>callback</b> &minus; This is the callback function which gets the three arguments, (err, bytesRead, buffer).</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label> How will you write a file using Node? </label>
<div class="toggle-content">
<p>Following is the syntax of one of the methods to write into a file:</p>
<pre class="prettyprint notranslate">
fs.writeFile(filename, data[, options], callback)
</pre>
<p>This method will over-write the file if file already exists. If you want to write into an existing file then you should use another method available.</p>
<h3>Parameters</h3>
<p>Here is the description of the parameters used:</p>
<ul class="list">
<li><p><b>path</b> &minus; This is string having file name including path.</p></li>
<li><p><b>data</b> &minus; This is the String or Buffer to be written into the file.</p></li>
<li><p><b>options</b> &minus; The third parameter is an object which will hold {encoding, mode, flag}. By default encoding is utf8, mode is octal value 0666 and flag is 'w'</p></li>
<li><p><b>callback</b> &minus; This is the callback function which gets a single parameter err and used to to return error in case of any writing error.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label> How will you close a file using Node? </label>
<div class="toggle-content">
<p>Following is the syntax of one of the methods to close an opened file:</p>
<pre class="prettyprint notranslate">
fs.close(fd, callback)
</pre>
<h3>Parameters</h3>
<p>Here is the description of the parameters used:</p>
<ul class="list">
<li><p><b>fd</b> &minus; This is the file descriptor returned by file fs.open() method.</p></li>
<li><p><b>callback</b> &minus; This is the callback function which gets no arguments other than a possible exception are given to the completion callback.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label> How will you get information about a file using Node? </label>
<div class="toggle-content">
<p>Following is the syntax of the method to get the information about a file:</p>
<pre class="prettyprint notranslate">
fs.stat(path, callback)
</pre>
<h3>Parameters</h3>
<p>Here is the description of the parameters used:</p>
<ul class="list">
<li><p><b>path</b> &minus; This is string having file name including path.</p></li>
<li><p><b>callback</b> &minus; This is the callback function which gets two arguments (err, stats) where <b>stats</b> is an object of fs.Stats type which is printed below in the example.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label> How will you truncate a file using Node? </label>
<div class="toggle-content">
<p>Following is the syntax of the method to truncate an opened file &minus;</p>
<pre class="prettyprint notranslate">
fs.ftruncate(fd, len, callback)
</pre>
<h3>Parameters</h3>
<p>Here is the description of the parameters used:</p>
<ul class="list">
<li><p><b>fd</b> &minus; This is the file descriptor returned by file fs.open() method.</p></li>
<li><p><b>len</b> &minus; This is the length of the file after which file will be truncated.</p></li>
<li><p><b>callback</b> &minus; This is the callback function which gets no arguments other than a possible exception are given to the completion callback.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label> How will you delete a file using Node? </label>
<div class="toggle-content">
<p>Following is the syntax of the method to delete a file &minus;</p>
<pre class="prettyprint notranslate">
fs.unlink(path, callback)
</pre>
<h3>Parameters</h3>
<p>Here is the description of the parameters used:</p>
<ul class="list">
<li><p><b>path</b> &minus; This is the file name including path.</p></li>
<li><p><b>callback</b> &minus; This is the callback function which gets no arguments other than a possible exception are given to the completion callback.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label> How will you create a directory? </label>
<div class="toggle-content">
<p>Following is the syntax of the method to create a directory:</p>
<pre class="prettyprint notranslate">
fs.mkdir(path[, mode], callback)
</pre>
<h3>Parameters</h3>
<p>Here is the description of the parameters used:</p>
<ul class="list">
<li><p><b>path</b> &minus; This is the directory name including path.</p></li>
<li><p><b>mode</b> &minus; This is the directory permission to be set. Defaults to 0777.</p></li>
<li><p><b>callback</b> &minus; This is the callback function which gets no arguments other than a possible exception are given to the completion callback.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label> How will you delete a directory? </label>
<div class="toggle-content">
<p>Following is the syntax of the method to remove a directory:</p>
<pre class="prettyprint notranslate">
fs.rmdir(path, callback)
</pre>
<h3>Parameters</h3>
<p>Here is the description of the parameters used:</p>
<ul class="list">
<li><p><b>path</b> &minus; This is the directory name including path.</p></li>
<li><p><b>callback</b> &minus; This is the callback function which gets no arguments other than a possible exception are given to the completion callback.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label> How will you read a directory? </label>
<div class="toggle-content">
<p>Following is the syntax of the method to read a directory:</p>
<pre class="prettyprint notranslate">
fs.readdir(path, callback)
</pre>
<h3>Parameters</h3>
<p>Here is the description of the parameters used:</p>
<ul class="list">
<li><p><b>path</b> &minus; This is the directory name including path.</p></li>
<li><p><b>callback</b> &minus; This is the callback function which gets two arguments (err, files) where files is an array of the names of the files in the directory excluding '.' and '..'.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label> What is the purpose of __filename variable? </label>
<div class="toggle-content">
<p> The __filename represents the filename of the code being executed. This is the resolved absolute path of this code file. For a main program this is not necessarily the same filename used in the command line. The value inside a module is the path to that module file. </p>
</div>
</section>
<section class="toggle">
<label> What is the purpose of __dirname variable? </label>
<div class="toggle-content">
<p> The __dirname represents the name of the directory that the currently executing script resides in. </p>
</div>
</section>
<section class="toggle">
<label> What is the purpose of setTimeout function? </label>
<div class="toggle-content">
<p> The setTimeout(cb, ms) global function is used to run callback cb after at least ms milliseconds. The actual delay depends on external factors like OS timer granularity and system load. A timer cannot span more than 24.8 days.</p>
<p>This function returns an opaque value that represents the timer which can be used to clear the timer. </p>
</div>
</section>
<section class="toggle">
<label> What is the purpose of clearTimeout function? </label>
<div class="toggle-content">
<p> The clearTimeout( t ) global function is used to stop a timer that was previously created with setTimeout(). Here t is the timer returned by setTimeout() function. </p>
</div>
</section>
<section class="toggle">
<label> What is the purpose of setInterval function? </label>
<div class="toggle-content">
<p> The setInterval(cb, ms) global function is used to run callback cb repeatedly after at least ms milliseconds. The actual delay depends on external factors like OS timer granularity and system load. A timer cannot span more than 24.8 days.</p>
<p>This function returns an opaque value that represents the timer which can be used to clear the timer using the function clearInterval(t). </p>
</div>
</section>
<section class="toggle">
<label> What is the purpose of console object? </label>
<div class="toggle-content">
<p> console object is used to Used to print information on stdout and stderr. </p>
</div>
</section>
<section class="toggle">
<label> What is the purpose of process object? </label>
<div class="toggle-content">
<p> process object is used to get information on current process. Provides multiple events related to process activities. </p>
</div>
</section>
<h2>What is Next ?</h2>
<p>Further you can go through your past assignments you have done with the subject and make sure you are able to speak confidently on them. If you are fresher then interviewer does not expect you will answer very complex questions, rather you have to make your basics concepts very strong.</p>
<p>Second it really doesn't matter much if you could not answer few questions but it matters that whatever you answered, you must have answered with confidence. So just feel confident during your interview. We at tutorialspoint wish you best luck to have a good interviewer and all the very best for your future endeavor. Cheers :-)</p>
<div class="mui-container-fluid button-borders show" id="bottom_navigation">
<div class="pre-btn">
<a href="index.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
<a class="hide-on-mobile" href="javascript:printPage();"><i class="fa fa-print"></i> Print Page</a>
</div>
<div class="nxt-btn">
<a href="index.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<div id="adp_bottom_ads"></div>
<script>
var adPos = document.getElementById('adp_bottom_ads');
var mobile_ad_id = "a8a632a6-046e-4f5c-b25f-8bc82ac89fb2";
var desktop_ad_id = "e7ddd6f7-1ab0-494a-bade-887daa4373a0";
var adpushup = adpushup || {};
adpushup.que = adpushup.que || [];
adpushup.que.push(function() {
var ad_id = window.innerWidth <= 768 ? mobile_ad_id : desktop_ad_id;
adPos.innerHTML = '<div id="' + ad_id + '" class="_ap_apex_ad"></div>';
adpushup.triggerAd(ad_id);
});
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" id="ad300" style="margin: 0px auto !important;margin-top:5px;">
<div id="f0f6cff6-393d-4170-b63a-d9ff06ca9f25" class="_ap_apex_ad">
<script>
var adpushup = adpushup || {};
adpushup.que = adpushup.que || [];
adpushup.que.push(function() {
adpushup.triggerAd("f0f6cff6-393d-4170-b63a-d9ff06ca9f25");
});
</script>
</div>
</div>
<div class="google-right-ad" style="margin-top:16px;">
<div id="5c0affd5-724a-475c-bfcd-cecbc7660c36" class="_ap_apex_ad">
<script>
var adpushup = adpushup || {};
adpushup.que = adpushup.que || [];
adpushup.que.push(function() {
adpushup.triggerAd("5c0affd5-724a-475c-bfcd-cecbc7660c36");
});
</script>
</div>
</div>
<div class="space-bottom"></div>

<div class="google-right-ad" style="margin-top:16px;margin-bottom:15px;">
<div id="8f8814c2-d64c-4d26-9cb9-543653c0b48f" class="_ap_apex_ad">
<script>
var adpushup = adpushup || {};
adpushup.que = adpushup.que || [];
adpushup.que.push(function() {
adpushup.triggerAd("8f8814c2-d64c-4d26-9cb9-543653c0b48f");
});
</script>
</div>
</div>
</div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm"> <i class="fal fa-shield-check"></i> Privacy Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2020. All Rights Reserved.</div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>

