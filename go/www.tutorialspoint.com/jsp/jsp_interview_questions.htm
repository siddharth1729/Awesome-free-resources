<!DOCTYPE html>
<html lang="en-US">
<head>
<title>JSP - Interview Questions - Tutorialspoint</title>
<meta charset="utf-8">
<meta name="description" content="JSP - Interview Questions - Dear readers, these JSP Interview Questions have been designed specially to get you acquainted with the nature of questions you may encounter during your interv"/>
<meta name="keywords" content="C, C++, Python, Java, HTML, CSS, JavaScript, SQL, PHP, jQuery, XML, DOM, Bootstrap, Tutorials, Articles, Programming, training, learning, quiz, preferences, examples, code"/>
<link rel="canonical" href="https://www.tutorialspoint.com/jsp/jsp_interview_questions.htm" />
<link rel="shortcut icon" href="/favicon.ico" type="image/x-icon" />
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=yes">
<link rel="stylesheet" href="/themes/css/style-min-v1.css?v=2.0.3">
<script src="/themes/js/script-min-v1.js?v=2.0.0"></script>
<script>function printPage() { window.print(); }</script>
<script data-cfasync="false" type="text/javascript">(function(w, d) { var s = d.createElement('script'); s.src = '//cdn.adpushup.com/40046/adpushup.js'; s.type = 'text/javascript'; s.async = true; (d.getElementsByTagName('head')[0] || d.getElementsByTagName('body')[0]).appendChild(s); })(window, document);</script>
<script data-cfasync="false" type="text/javascript">(function(w, d) { var s = d.createElement('script'); s.src = '//delivery.adrecover.com/18107/adRecover.js'; s.type = 'text/javascript'; s.async = true; (d.getElementsByTagName('head')[0] || d.getElementsByTagName('body')[0]).appendChild(s); })(window, document);</script>
<style>
.right-menu .mui-btn {
    background-color:#4bd863;
}
a.demo {
    background:#4bd863;
}
li.heading {
    background:#4bd863;
}
.course-box{background:#4bd863}
.home-intro-sub p{color:#4bd863}
</style>
</head>
<body>
<header id="header">
<!-- Top sub-menu Starts Here -->
<div class="mui-appbar mui-container-fulid top-menu">
<div class="mui-container">
<div class="top-menu-item home">
<a href="https://www.tutorialspoint.com/index.htm" target="_blank" title="TutorialsPoint - Home"><i class="fal fa-home"></i> <span>Home</span></a>
</div>
<div class="top-menu-item qa">
<a href="https://www.tutorialspoint.com/about/about_careers.htm" target="_blank" title="Job @ Tutorials Point"><i class="fa fa-suitcase"></i> <span>Jobs</span></a>
</div>
<div class="top-menu-item tools">
<a href="https://www.tutorialspoint.com/online_dev_tools.htm" target="_blank" title="Tools - Online Development and Testing Tools"><i class="fal fa-cogs"></i> <span>Tools</span></a>
</div>
<div class="top-menu-item coding-ground">
<a href="https://www.tutorialspoint.com/codingground.htm" target="_blank" title="Coding Ground - Free Online IDE and Terminal"><i class="fal fa-code"></i> <span>Coding Ground </span></a> 
</div>
<div class="top-menu-item current-affairs">
<a href="https://www.tutorialspoint.com/current_affairs.htm" target="_blank" title="Daily Current Affairs"><i class="fal fa-layer-plus"></i> <span>Current Affairs</span></a>
</div>
<div class="top-menu-item upsc-notes">
<a href="https://www.tutorialspoint.com/upsc_ias_exams.htm" target="_blank" title="UPSC IAS Exams Notes - TutorialsPoint"><i class="fal fa-user-tie"></i> <span>UPSC Notes</span></a>
</div>      
<div class="top-menu-item online-tutoris">
<a href="https://www.tutorialspoint.com/tutor_connect/index.php" target="_blank" title="Top Online Tutors - Tutor Connect"><i class="fal fa-user"></i> <span>Online Tutors</span></a>
</div>
<div class="top-menu-item whiteboard">
<a href="https://www.tutorialspoint.com/whiteboard.htm" target="_blank" title="Free Online Whiteboard"><i class="fal fa-chalkboard"></i> <span>Whiteboard</span></a>
</div>
<div class="top-menu-item net-meeting">
<a href="https://www.tutorialspoint.com/netmeeting.php" target="_blank" title="A free tool for online video conferencing"><i class="fal fa-chalkboard-teacher"></i> <span>Net Meeting</span></a> 
</div>
<div class="top-menu-item articles">
<a href="https://www.tutorix.com" target="_blank" title="Tutorx - The Best Learning App" rel="nofollow"><i class="fal fa-video"></i> <span>Tutorix</span></a> 
</div>        
<div class="social-menu-item">
<a href="https://www.facebook.com/tutorialspointindia" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Facebook"><i class="fab fa-facebook-f"></i></a> 
<a href="https://www.twitter.com/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Twitter"><i class="fab fa-twitter"></i></a>
<a href="https://www.linkedin.com/company/tutorialspoint" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint @ Linkedin"><i class="fab fa-linkedin-in"></i></a>
<a href="https://www.youtube.com/channel/UCVLbzhxVTiTLiVKeGV7WEBg" target="_blank" rel="nofollow" data-placement="bottom" title="tutorialspoint YouTube"><i class="fab fa-youtube"></i></a>
</div>        
</div>
</div>
<!-- Top sub-menu Ends Here -->
<!-- Top main-menu Starts Here -->
<div class="mui-appbar mui-container-fulid mui--appbar-line-height mui--z1" id="logo-menu">
<div class="mui-container">
<div class="left-menu">
<a href="https://www.tutorialspoint.com/index.htm" title="Tutorialspoint">
<img class="tp-logo" alt="tutorialspoint" src="/jsp/images/logo.png">
</a>
<div class="mui-dropdown">
<a class="mui-btn mui-btn--primary categories" data-mui-toggle="dropdown"><i class="fa fa-th-large"></i> 
<span>Categories <span class="mui-caret"></span></span></a>            
<ul class="mui-dropdown__menu cat-menu">
<li>
<ul>
<li><a href="/academic_tutorials.htm"><i class="fa fa-caret-right"></i> Academic Tutorials</a></li>
<li><a href="/big_data_tutorials.htm"><i class="fa fa-caret-right"></i> Big Data &amp; Analytics </a></li>
<li><a href="/computer_programming_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Programming </a></li>
<li><a href="/computer_science_tutorials.htm"><i class="fa fa-caret-right"></i> Computer Science </a></li>
<li><a href="/database_tutorials.htm"><i class="fa fa-caret-right"></i> Databases </a></li>
<li><a href="/devops_tutorials.htm"><i class="fa fa-caret-right"></i> DevOps </a></li>
<li><a href="/digital_marketing_tutorials.htm"><i class="fa fa-caret-right"></i> Digital Marketing </a></li>
<li><a href="/engineering_tutorials.htm"><i class="fa fa-caret-right"></i> Engineering Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> Exams Syllabus </a></li>
<li><a href="/famous_monuments.htm"><i class="fa fa-caret-right"></i> Famous Monuments </a></li>
<li><a href="/gate_exams_tutorials.htm"><i class="fa fa-caret-right"></i> GATE Exams Tutorials</a></li>
<li><a href="/latest_technologies.htm"><i class="fa fa-caret-right"></i> Latest Technologies </a></li>
<li><a href="/machine_learning_tutorials.htm"><i class="fa fa-caret-right"></i> Machine Learning </a></li>
<li><a href="/mainframe_tutorials.htm"><i class="fa fa-caret-right"></i> Mainframe Development </a></li>
<li><a href="/management_tutorials.htm"><i class="fa fa-caret-right"></i> Management Tutorials </a></li>
<li><a href="/maths_tutorials.htm"><i class="fa fa-caret-right"></i> Mathematics Tutorials</a></li>
<li><a href="/microsoft_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Microsoft Technologies </a></li>
<li><a href="/misc_tutorials.htm"><i class="fa fa-caret-right"></i> Misc tutorials </a></li>
<li><a href="/mobile_development_tutorials.htm"><i class="fa fa-caret-right"></i> Mobile Development </a></li>
<li><a href="/java_technology_tutorials.htm"><i class="fa fa-caret-right"></i> Java Technologies </a></li>
<li><a href="/python_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> Python Technologies </a></li>
<li><a href="/sap_tutorials.htm"><i class="fa fa-caret-right"></i> SAP Tutorials </a></li>
<li><a href="/scripting_lnaguage_tutorials.htm"><i class="fa fa-caret-right"></i>Programming Scripts </a></li>
<li><a href="/selected_reading.htm"><i class="fa fa-caret-right"></i> Selected Reading </a></li>
<li><a href="/software_quality_tutorials.htm"><i class="fa fa-caret-right"></i> Software Quality </a></li>
<li><a href="/soft_skill_tutorials.htm"><i class="fa fa-caret-right"></i> Soft Skills </a></li>
<li><a href="/telecom_tutorials.htm"><i class="fa fa-caret-right"></i> Telecom Tutorials </a></li>
<li><a href="/upsc_ias_exams.htm"><i class="fa fa-caret-right"></i> UPSC IAS Exams </a></li>
<li><a href="/web_development_tutorials.htm"><i class="fa fa-caret-right"></i> Web Development </a></li>
<li><a href="/sports_tutorials.htm"><i class="fa fa-caret-right"></i> Sports Tutorials </a></li>
<li><a href="/xml_technologies_tutorials.htm"><i class="fa fa-caret-right"></i> XML Technologies </a></li>
<li><a href="/multi_language_tutorials.htm"><i class="fa fa-caret-right"></i> Multi-Language</a></li>
<li><a href="/questions_and_answers.htm"><i class="fa fa-caret-right"></i> Interview Questions</a></li>
</ul>
</li>
</ul>
<div class="clear"></div>
</div> 
</div>
<div class="right-menu">
<div class="toc-toggle">
<a href="javascript:void(0);"><i class="fa fa-bars"></i></a>
</div>
<div class="mobile-search-btn">
<a href="https://www.tutorialspoint.com/search.htm"><i class="fal fa-search"></i></a>
</div>
<div class="search-box">
<form method="get" class="search-form" name="searchform" action="https://www.google.com/search" target="_blank" novalidate="">
<input type="hidden" name="sitesearch" value="www.tutorialspoint.com" class="user-valid valid">
<input class="header-search-box" type="text" id="search-string" name="q" placeholder="Search your favorite tutorials..." onfocus="if (this.value == 'Search your favorite tutorials...') {this.value = '';}" onblur="if (this.value == '') {this.value = 'Search your favorite tutorials...';}" autocomplete="off">
<button><i class="fal fa-search"></i></button>
</form>
</div>
<div class="menu-btn library-btn">
<a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a>
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/videotutorials/index.php"><i class="fal fa-video"></i> <span>Videos</span></a> 
</div>
<div class="menu-btn videos-btn">
<a href="https://www.tutorialspoint.com/questions/index.php"><i class="fa fa-location-arrow"></i> <span>Q/A</span></a>
</div>
<div class="menu-btn ebooks-btn">
<a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a>
</div>
<div class="mui-dropdown">
<button class="mui-btn mui-btn--primary mobile-menu" data-mui-toggle="dropdown">
<span class="mui-caret"></span>
</button>
<ul class="mui-dropdown__menu">
<li><a href="https://www.tutorialspoint.com/tutorialslibrary.htm"><i class="fal fa-cubes"></i> <span>Library</span></a></li>
<li><a href="https://www.tutorialspoint.com/videotutorials/index.php"><i class="fal fa-video"></i> <span>Videos</span></a></li>
<li><a href="https://store.tutorialspoint.com"><i class="fal fa-book"></i> <span>eBooks</span></a></li>
</ul>
</div>
</div>
</div>
</div>
<!-- Top main-menu Ends Here -->
</header>
<div class="mui-container-fluid content">
<div class="mui-container">
<!-- Tutorial ToC Starts Here -->
<div class="mui-col-md-3 tutorial-toc">
<div class="mini-logo">
<img src="/jsp/images/jsp-mini-logo.jpg" alt="JSP Tutorial" />
</div>
<ul class="toc chapters">
<li class="heading">Basic JSP Tutorial</li>
<li><a href="/jsp/index.htm">JSP - Home</a></li>
<li><a href="/jsp/jsp_overview.htm">JSP - Overview</a></li>
<li><a href="/jsp/jsp_environment_setup.htm">JSP - Environment Setup</a></li>
<li><a href="/jsp/jsp_architecture.htm">JSP - Architecture</a></li>
<li><a href="/jsp/jsp_life_cycle.htm">JSP - Lifecycle</a></li>
<li><a href="/jsp/jsp_syntax.htm">JSP - Syntax</a></li>
<li><a href="/jsp/jsp_directives.htm">JSP - Directives</a></li>
<li><a href="/jsp/jsp_actions.htm">JSP - Actions</a></li>
<li><a href="/jsp/jsp_implicit_objects.htm">JSP - Implicit Objects</a></li>
<li><a href="/jsp/jsp_client_request.htm">JSP - Client Request</a></li>
<li><a href="/jsp/jsp_server_response.htm">JSP - Server Response</a></li>
<li><a href="/jsp/jsp_http_status_codes.htm">JSP - Http Status Codes</a></li>
<li><a href="/jsp/jsp_form_processing.htm">JSP - Form Processing</a></li>
<li><a href="/jsp/jsp_writing_filters.htm">JSP - Writing Filters</a></li>
<li><a href="/jsp/jsp_cookies_handling.htm">JSP - Cookies Handling</a></li>
<li><a href="/jsp/jsp_session_tracking.htm">JSP - Session Tracking</a></li>
<li><a href="/jsp/jsp_file_uploading.htm">JSP - File Uploading</a></li>
<li><a href="/jsp/jsp_handling_date.htm">JSP - Handling Date</a></li>
<li><a href="/jsp/jsp_page_redirect.htm">JSP - Page Redirect</a></li>
<li><a href="/jsp/jsp_hits_counter.htm">JSP - Hits Counter</a></li>
<li><a href="/jsp/jsp_auto_refresh.htm">JSP - Auto Refresh</a></li>
<li><a href="/jsp/jsp_sending_email.htm">JSP - Sending Email</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">Advanced JSP Tutorials</li>
<li><a href="/jsp/jsp_standard_tag_library.htm">JSP - Standard Tag Library</a></li>
<li><a href="/jsp/jsp_database_access.htm">JSP - Database Access</a></li>
<li><a href="/jsp/jsp_xml_data.htm">JSP - XML Data</a></li>
<li><a href="/jsp/jsp_java_beans.htm">JSP - Java Beans</a></li>
<li><a href="/jsp/jsp_custom_tags.htm">JSP - Custom Tags</a></li>
<li><a href="/jsp/jsp_expression_language.htm">JSP - Expression Language</a></li>
<li><a href="/jsp/jsp_exception_handling.htm">JSP - Exception Handling</a></li>
<li><a href="/jsp/jsp_debugging.htm">JSP - Debugging</a></li>
<li><a href="/jsp/jsp_security.htm">JSP - Security</a></li>
<li><a href="/jsp/jsp_internationalization.htm">JSP - Internationalization</a></li>
</ul>
<ul class="toc chapters">
<li class="heading">JSP Useful Resources</li>
<li><a href="/jsp/jsp_questions_answers.htm">JSP - Questions and Answers</a></li>
<li><a href="/jsp/jsp_quick_guide.htm">JSP - Quick Guide</a></li>
<li><a href="/jsp/jsp_useful_resources.htm">JSP - Useful Resources</a></li>
<li><a href="/jsp/jsp_discussion.htm">JSP - Discussion</a></li>
</ul>
<ul class="toc reading">
<li class="sreading">Selected Reading</li>
<li><a target="_top" href="/upsc_ias_exams.htm">UPSC IAS Exams Notes</a></li>
<li><a target="_top" href="/developers_best_practices/index.htm">Developer's Best Practices</a></li>
<li><a target="_top" href="/questions_and_answers.htm">Questions and Answers</a></li>
<li><a target="_top" href="/effective_resume_writing.htm">Effective Resume Writing</a></li>
<li><a target="_top" href="/hr_interview_questions/index.htm">HR Interview Questions</a></li>
<li><a target="_top" href="/computer_glossary.htm">Computer Glossary</a></li>
<li><a target="_top" href="/computer_whoiswho.htm">Who is Who</a></li>
</ul>
<div id="stickyparent">
<div style="height:250px;width:300px;" id="sticky-ad">
<div id="430c9911-782f-495d-88f9-69f58ca8c9a4" class="_ap_apex_ad" >
<script>
var adpushup = adpushup || {};
adpushup.que = adpushup.que || [];
adpushup.que.push(function() {
adpushup.triggerAd("430c9911-782f-495d-88f9-69f58ca8c9a4");
});
</script>
</div>
</div>
</div>
</div>
<!-- Tutorial ToC Ends Here -->
<!-- Tutorial Content Starts Here -->
<div class="mui-col-md-6 tutorial-content">
<h1>JSP - Interview Questions</h1>
<hr />
<div class="top-ad-heading">Advertisements</div>
<div style="text-align:center" class="google-top-ads">
<div id="adp_top_ads" style="text-align:center !important;"></div>
<script>
     var adPos = document.getElementById('adp_top_ads');
     var ad_id_720 = "8014640d-fd34-4b2e-9b1b-cc67234a2325";
     var ad_id_650 = "2d1bb2c4-eb72-471d-9c80-1bf5514728c1";
     var ad_id_300 = "df94a1a9-ae2f-432d-9a92-d93823ff4503";
     var width = window.innerWidth;
     var ad_id = ad_id_720;
     if( width <= 768 ){
        ad_id =  ad_id_300;
     }else if( width <= 1435 ){
        ad_id =  ad_id_650;
     }
     adPos.innerHTML = '<div id="' + ad_id + '" class="_ap_apex_ad"></div>';
     var adpushup = adpushup || {};
     adpushup.que = adpushup.que || [];
     adpushup.que.push(function() {
     adpushup.triggerAd(ad_id);
     });
</script>
</div>
<br>
<div class="mui-container-fluid button-borders">
<div class="pre-btn">
<a href="jsp_questions_answers.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
</div>
<div class="nxt-btn">
<a href="jsp_questions_answers.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="clearer"></div>
<p>Dear readers, these <b>JSP Interview Questions</b> have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of <b>JSP</b>. As per my experience good interviewers hardly plan to ask any particular question during your interview, normally questions start with some basic concept of the subject and later they continue based on further discussion and what you answer &minus;</p>
<section class="toggle">
<label> What is JSP?</label>
<div class="toggle-content">
<p>JavaServer Pages (JSP) is a technology for developing Webpages that support dynamic content which helps developers insert java code in HTML pages by making use of special JSP tags, most of which start with &lt;% and end with %&gt;.</p>
</div>
</section>
<section class="toggle">
<label> What are advantages of using JSP?</label>
<div class="toggle-content">
<p>JSP offer several advantages as listed below &minus;</p>
<ul class="list">
<li><p>Performance is significantly better because JSP allows embedding Dynamic Elements in HTML Pages itself.</p></li>
<li><p>JSP are always compiled before it's processed by the server unlike CGI/Perl which requires the server to load an interpreter and the target script each time the page is requested.</p></li>
<li><p>JavaServer Pages are built on top of the Java Servlets API, so like Servlets, JSP also has access to all the powerful Enterprise Java APIs, including JDBC, JNDI, EJB, JAXP etc.</p></li>
<li><p>JSP pages can be used in combination with servlets that handle the business logic, the model supported by Java servlet template engines.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label> What are the advantages of JSP over Active Server Pages (ASP)?</label> 
<div class="toggle-content">
<p>The advantages of JSP are twofold.</p>
<p>First, the dynamic part is written in Java, not Visual Basic or other MS specific language, so it is more powerful and easier to use.</p>
<p>Second, it is portable to other operating systems and non-Microsoft Web servers.</p>
</div>
</section>
<section class="toggle">
<label> What are the advantages of JSP over Pure Servlets?</label> 
<div class="toggle-content">
<p>It is more convenient to write (and to modify!) regular HTML than to have plenty of println statements that generate the HTML. Other advantages are &minus;</p>
<ul class="list">
<li><p>Embedding of Java code in HTML pages.</p></li>
<li><p>Platform independence.</p></li>
<li><p>Creation of database-driven Web applications.</p></li>
<li><p>Server-side programming capabilities.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label> What are the advantages of JSP over Server-Side Includes (SSI)?</label> 
<div class="toggle-content">
<p>SSI is really only intended for simple inclusions, not for "real" programs that use form data, make database connections, and the like.</p>
</div>
</section>
<section class="toggle">
<label> What are the advantages of JSP over  JavaScript?</label> 
<div class="toggle-content">
<p>JavaScript can generate HTML dynamically on the client but can hardly interact with the web server to perform complex tasks like database access and image processing etc.</p>
</div>
</section>
<section class="toggle">
<label> What are the advantages of JSP over Static HTML?</label> 
<div class="toggle-content">
<p>Regular HTML, of course, cannot contain dynamic information.</p>
</div>
</section>
<section class="toggle">
<label> Explain lifecycle of a JSP.</label>
<div class="toggle-content">
<p>A JSP Lifecycle consists of following steps &minus;</p>
<ul class="list">
<li><p><b>Compilation</b> &minus; When a browser asks for a JSP, the JSP engine first checks to see whether it needs to compile the page. If the page has never been compiled, or if the JSP has been modified since it was last compiled, the JSP engine compiles the page.</p>
<p>The compilation process involves three steps &minus;</p>
<ul class="list">
<li><p>Parsing the JSP.</p></li>
<li><p>Turning the JSP into a servlet.</p></li>
<li><p>Compiling the servlet.</p></li>
</ul>
</li>
<li><p><b>Initialization</b> &minus; When a container loads a JSP it invokes the jspInit() method before servicing any requests</p></li>
<li><p><b>Execution</b> &minus; Whenever a browser requests a JSP and the page has been loaded and initialized, the JSP engine invokes the _jspService() method in the JSP.The _jspService() method of a JSP is invoked once per a request and is responsible for generating the response for that request and this method is also responsible for generating responses to all seven of the HTTP methods ie. GET, POST, DELETE etc.</p></li>
<li><p><b>Cleanup</b> &minus; The destruction phase of the JSP life cycle represents when a JSP is being removed from use by a container.The jspDestroy() method is the JSP equivalent of the destroy method for servlets.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label> What is a sciptlet in JSP and what is its syntax?</label> 
<div class="toggle-content">
<p>A scriptlet can contain any number of JAVA language statements, variable or method declarations, or expressions that are valid in the page scripting language.</p>
<p>Following is the syntax of Scriptlet &minus;</p>
<pre class="result notranslate">
&lt;% code fragment %&gt;
</pre> 
</div>
</section>
<section class="toggle">
<label> What are JSP declarations?</label> 
<div class="toggle-content">
<p>A declaration declares one or more variables or methods that you can use in Java code later in the JSP file. You must declare the variable or method before you use it in the JSP file.</p>
<pre class="result notranslate">
&lt;%! declaration; [ declaration; ]+ ... %&gt;
</pre> 
</div>
</section>
<section class="toggle">
<label> What are JSP expressions?</label> 
<div class="toggle-content">
<p>A JSP expression element contains a scripting language expression that is evaluated, converted to a String, and inserted where the expression appears in the JSP file.</p>
<p>The expression element can contain any expression that is valid according to the Java Language Specification but you cannot use a semicolon to end an expression.</p>
<p>Its syntax is &minus;</p>
<pre class="result notranslate">
&lt;%= expression %&gt;
</pre>
</div>
</section>
<section class="toggle">
<label> What are JSP comments?</label> 
<div class="toggle-content">
<p>JSP comment marks text or statements that the JSP container should ignore. A JSP comment is useful when you want to hide or "comment out" part of your JSP page.</p>
<p>Following is the syntax of JSP comments &minus;</p>
<pre class="result notranslate">
&lt;%-- This is JSP comment --%&gt;
</pre>
</div>
</section>
<section class="toggle">
<label> What are JSP Directives?</label> 
<div class="toggle-content">
<p>A JSP directive affects the overall structure of the servlet class. It usually has the following form &minus;</p>
<pre class="result notranslate">
&lt;%@ directive attribute = "value" %&gt;
</pre> 
</div>
</section>
<section class="toggle">
<label> What are the types of directive tags?</label> 
<div class="toggle-content">
<p>The types directive tags are as follows &minus;</p>
<ul class="list">
<li><p><b>&lt;%@ page ... %&gt;</b> &minus; Defines page-dependent attributes, such as scripting language, error page, and buffering requirements.</p></li>
<li><p><b>&lt;%@ include ... %&gt;</b> &minus; Includes a file during the translation phase.</p></li>
<li><p><b>&lt;%@ taglib ... %&gt;</b> &minus; Declares a tag library, containing custom actions, used in the page.</p></li>
</ul> 
</div>
</section>
<section class="toggle">
<label> What are JSP actions?</label> 
<div class="toggle-content">
<p>JSP actions use constructs in XML syntax to control the behavior of the servlet engine. You can dynamically insert a file, reuse JavaBeans components, forward the user to another page, or generate HTML for the Java plugin.</p>
<p>Its syntax is as follows &minus;</p>
<pre class="result notranslate">
&lt;jsp:action_name attribute = "value" /&gt;
</pre> 
</div>
</section>
<section class="toggle">
<label> Name some JSP actions.</label> 
<div class="toggle-content">
<p>jsp:include, jsp:useBean,jsp:setProperty,jsp:getProperty, jsp:forward,jsp:plugin,jsp:element, jsp:attribute, jsp:body, jsp:text</p> 
</div>
</section>
<section class="toggle">
<label> What are JSP literals?</label> 
<div class="toggle-content">
<p>Literals are the values, such as a number or a text string, that are written literally as part of a program code. The JSP expression language defines the following literals &minus;</p>
<ul class="list">
<li><p><b>Boolean</b> &minus; true and false</p></li>
<li><p><b>Integer</b> &minus; as in Java</p></li>
<li><p><b>Floating point</b> &minus; as in Java</p></li>
<li><p><b>String</b> &minus; with single and double quotes; " is escaped as \", ' is escaped as \', and \ is escaped as \\.</p></li>
<li><p><b>Null</b> &minus; null</p></li>
</ul> 
</div>
</section>
<section class="toggle">
<label> What is a page directive?</label> 
<div class="toggle-content">
<p>The <b>page</b> directive is used to provide instructions to the container that pertain to the current JSP page. You may code page directives anywhere in your JSP page.</p> 
</div>
</section>
<section class="toggle">
<label> What are various attributes Of page directive?</label> 
<div class="toggle-content">
<p>Page directive contains the following 13 attributes.</p>
<ol class="list">
<li><p>language</p></li>
<li><p>extends</p></li>
<li><p>import</p></li>
<li><p>session</p></li>
<li><p>isThreadSafe</p></li>
<li><p>info</p></li>
<li><p>errorPage</p></li>
<li><p>isErrorpage</p></li>
<li><p>contentType</p></li>
<li><p>isELIgnored</p></li>
<li><p>buffer</p></li>
<li><p>autoFlush</p></li>
<li><p>isScriptingEnabled</p></li>
</ol> 
</div>
</section>
<section class="toggle">
<label> What is a buffer attribute?</label> 
<div class="toggle-content">
<p>The buffer attribute specifies buffering characteristics for the server output response object.</p> 
</div>
</section>
<section class="toggle">
<label> What happens when buffer is set to a value <i>“none”</i>?</label> 
<div class="toggle-content">
<p>When buffer is set to <i>“none”</i>, servlet output is immediately directed to the response output object.</p> 
</div>
</section>
<section class="toggle">
<label> What is autoFlush attribute?</label> 
<div class="toggle-content">
<p>The <b>autoFlush</b> attribute specifies whether buffered output should be flushed automatically when the buffer is filled, or whether an exception should be raised to indicate buffer overflow.</p>
<p>A value of <b>true</b> (default) indicates automatic buffer flushing and a value of <b>false</b> throws an exception.</p> 
</div>
</section>
<section class="toggle">
<label> What is contentType attribute?</label> 
<div class="toggle-content">
<p>The <b>contentType</b> attribute sets the character encoding for the JSP page and for the generated response page. The default content type is text/html, which is the standard content type for HTML pages.</p> 
</div>
</section>
<section class="toggle">
<label> What is errorPage attribute?</label> 
<div class="toggle-content">
<p>The <b>errorPage</b> attribute tells the JSP engine which page to display if there is an error while the current page runs. The value of the errorPage attribute is a relative URL.</p> 
</div>
</section>
<section class="toggle">
<label> What is <i>isErrorPage</i> attribute?</label> 
<div class="toggle-content">
<p>The <i>isErrorPage</i> attribute indicates that the current JSP can be used as the error page for another JSP.</p>
<p>The value of <i>isErrorPage</i> is either true or false. The default value of the <i>isErrorPage</i> attribute is false.</p> 
</div>
</section>
<section class="toggle">
<label> What is extends attribute?</label> 
<div class="toggle-content">
<p>The <b>extends</b> attribute specifies a superclass that the generated servlet must extend.</p> 
</div>
</section>
<section class="toggle">
<label> What is  import attribute?</label> 
<div class="toggle-content">
<p>The <b>import</b> attribute serves the same function as, and behaves like, the Java import statement. The value for the import option is the name of the package you want to import.</p> 
</div>
</section>
<section class="toggle">
<label> What is info attribute?</label> 
<div class="toggle-content">
<p>The <b>info</b> attribute lets you provide a description of the JSP.</p> 
</div>
</section>
<section class="toggle">
<label> What is isThreadSafe attribute?</label> 
<div class="toggle-content">
<p>The <b>isThreadSafe</b> option marks a page as being thread-safe. By default, all JSPs are considered thread-safe. If you set the isThreadSafe option to false, the JSP engine makes sure that only one thread at a time is executing your JSP.</p> 
</div>
</section>
<section class="toggle">
<label> What is language attribute?</label> 
<div class="toggle-content">
<p>The <b>language</b> attribute indicates the programming language used in scripting the JSP page.</p> 
</div>
</section>
<section class="toggle">
<label> What is session attribute?</label> 
<div class="toggle-content">
<p>The <b>session</b> attribute indicates whether or not the JSP page uses HTTP sessions. A value of true means that the JSP page has access to a builtin session object and a value of false means that the JSP page cannot access the builtin session object.</p> 
</div>
</section>
<section class="toggle">
<label> What is isELIgnored Attribute?</label> 
<div class="toggle-content">
<p>The <b>isELIgnored</b> option gives you the ability to disable the evaluation of Expression Language (EL) expressions.</p>
<p>The default value of the attribute is true, meaning that expressions, ${...}, are evaluated as dictated by the JSP specification. If the attribute is set to false, then expressions are not evaluated but rather treated as static text.</p> 
</div>
</section>
<section class="toggle">
<label> What is isScriptingEnabled Attribute?</label> 
<div class="toggle-content">
<p>The <b>isScriptingEnabled</b> attribute determines if scripting elements are allowed for use.</p>
<p>The default value (true) enables scriptlets, expressions, and declarations. If the attribute's value is set to false, a translation-time error will be raised if the JSP uses any scriptlets, expressions (non-EL), or declarations.</p> 
</div>
</section>
<section class="toggle">
<label> What is a include directive?</label> 
<div class="toggle-content">
<p>The include directive is used to includes a file during the translation phase. This directive tells the container to merge the content of other external files with the current JSP during the translation phase. You may code include directives anywhere in your JSP page.</p>
<p>The general usage form of this directive is as follows &minus;</p>
<pre class="result notranslate">
&lt;%@ include file = "relative url" &gt;
</pre> 
</div>
</section>
<section class="toggle">
<label> What is a taglib directive?</label> 
<div class="toggle-content">
<p>The taglib directive follows the following syntax &minus;</p>
<pre class="prettyprint notranslate">
&lt;%@ taglib uri = "uri" prefix = "prefixOfTag"&gt;
</pre>
<p><i>uri</i> attribute value resolves to a location the container understands</p>
<p><i>prefix</i> attribute informs a container what bits of markup are custom actions.</p>
<p>The taglib directive follows the following syntax &minus;</p>
<pre class="result notranslate">
&lt;%@ taglib uri = "uri" prefix = "prefixOfTag" &gt;
</pre> 
</div>
</section>
<section class="toggle">
<label> What do the <b>id</b> and <b>scope</b> attribute mean in the action elements?</label> 
<div class="toggle-content">
<ul class="list">
<li><p><b>Id attribute</b> &minus; The id attribute uniquely identifies the Action element, and allows the action to be referenced inside the JSP page. If the Action creates an instance of an object the id value can be used to reference it through the implicit object PageContext</p></li>
<li><p><b>Scope attribute</b> &minus; This attribute identifies the lifecycle of the Action element. The id attribute and the scope attribute are directly related, as the scope attribute determines the lifespan of the object associated with the id. The scope attribute has four possible values: (a) page, (b)request, (c)session, and (d) application.</p></li>
</ul> 
</div>
</section>
<section class="toggle">
<label> What is the function of &lt;jsp:include&gt; action?</label> 
<div class="toggle-content">
<p>This action lets you insert files into the page being generated. The syntax looks like this &minus;</p>
<pre class="result notranslate">
&lt;jsp:include page = "relative URL" flush = "true" /&gt;
</pre>
<p>Where <b>page</b> is the relative URL of the page to be included.</p>
<p><b>Flush</b> is the boolean attribute the determines whether the included resource has its buffer flushed before it is included.</p> 
</div>
</section>
<section class="toggle">
<label> What is the difference between include action and include directive?</label> 
<div class="toggle-content">
<p>Unlike the <b>include directive</b>, which inserts the file at the time the JSP page is translated into a servlet, <b>include action</b> inserts the file at the time the page is requested.</p> 
</div>
</section>
<section class="toggle">
<label> What is &lt;jsp:useBean&gt; action?</label> 
<div class="toggle-content">
<p>The <b>useBean</b> action is quite versatile. It first searches for an existing object utilizing the id and scope variables. If an object is not found, it then tries to create the specified object.</p>
<p>The simplest way to load a bean is as follows &minus;</p>
<pre class="result notranslate">
&lt;jsp:useBean id = "name" class = "package.class" /&gt;
</pre> 
</div>
</section>
<section class="toggle">
<label> What is &lt;jsp:setProperty&gt; action?</label> 
<div class="toggle-content">
<p>The <b>setProperty</b> action sets the properties of a Bean. The Bean must have been previously defined before this action.</p> 
</div>
</section>
<section class="toggle">
<label> What is &lt;jsp:getProperty&gt; action?</label> 
<div class="toggle-content">
<p>The <b>getProperty</b> action is used to retrieve the value of a given property and converts it to a string, and finally inserts it into the output.</p> 
</div>
</section>
<section class="toggle">
<label> What is &lt;jsp:forward&gt; Action?</label> 
<div class="toggle-content">
<p>The <b>forward</b>  action terminates the action of the current page and forwards the request to another resource such as a static page, another JSP page, or a Java Servlet.</p>
<p>The simple syntax of this action is as follows &minus;</p>
<pre class="result notranslate">
&lt;jsp:forward page = "Relative URL" /&gt;
</pre> 
</div>
</section>
<section class="toggle">
<label> What is &lt;jsp:plugin&gt; Action?</label> 
<div class="toggle-content">
<p>The <b>plugin</b> action is used to insert Java components into a JSP page. It determines the type of browser and inserts the &lt;object&gt; or &lt;embed&gt; tags as needed.</p>
<p>If the needed plugin is not present, it downloads the plugin and then executes the Java component. The Java component can be either an Applet or a JavaBean.</p> 
</div>
</section>
<section class="toggle">
<label> What are the different scope values for the JSP action?</label> 
<div class="toggle-content">
<p>The scope attribute identifies the lifecycle of the Action element. It has four possible values: (a) page, (b)request, (c)session, and (d) application.</p> 
</div>
</section>
<section class="toggle">
<label> What are JSP implicit objects?</label> 
<div class="toggle-content">
<p>JSP Implicit Objects are the Java objects that the JSP Container makes available to developers in each page and developer can call them directly without being explicitly declared. JSP Implicit Objects are also called pre-defined variables.</p> 
</div>
</section>
<section class="toggle">
<label> What implicit objects are supported by JSP?</label> 
<div class="toggle-content">
<p>request, response, out, session, application, config, pageContext, page, Exception</p> 
</div>
</section>
<section class="toggle">
<label> What is a request object?</label> 
<div class="toggle-content">
<p>The request object is an instance of a javax.servlet.http.HttpServletRequest object. Each time a client requests a page the JSP engine creates a new object to represent that request.</p>
<p>The request object provides methods to get HTTP header information including form data, cookies, HTTP methods etc.</p> 
</div>
</section>
<section class="toggle">
<label> How can you read a request header information?</label> 
<div class="toggle-content">
<p>Using getHeaderNames() method of HttpServletRequest to read the HTTP header information. This method returns an Enumeration that contains the header information associated with the current HTTP request.</p> 
</div>
</section>
<section class="toggle">
<label> What is a response object?</label> 
<div class="toggle-content">
<p>The response object is an instance of a javax.servlet.http.HttpServletRequest object. Just as the server creates the request object, it also creates an object to represent the response to the client.</p>
<p>The response object also defines the interfaces that deal with creating new HTTP headers. Through this object the JSP programmer can add new cookies or date stamps, HTTP status codes etc.</p> 
</div>
</section>
<section class="toggle">
<label> What is the <b>out</b> implicit object?</label> 
<div class="toggle-content">
<p>The <b>out</b> implicit object is an instance of a javax.servlet.jsp.JspWriter object and is used to send content in a response.</p> 
</div>
</section>
<section class="toggle">
<label> What is the difference between JspWriter and PrintWriter?</label> 
<div class="toggle-content">
<p>The <b>JspWriter</b> object contains most of the same methods as the java.io.PrintWriter class. However, JspWriter has some additional methods designed to deal with buffering. Unlike the <b>PrintWriter</b> object, JspWriter throws IOExceptions.</p> 
</div>
</section>
<section class="toggle">
<label> What is the session Object?</label> 
<div class="toggle-content">
<p>The session object is an instance of javax.servlet.http.HttpSession and is used to track client session between client requests</p>
</div>
</section>
<section class="toggle">
<label> What is an application Object?</label> 
<div class="toggle-content">
<p>The application object is direct wrapper around the ServletContext object for the generated Servlet and in reality an instance of a javax.servlet.ServletContext object.</p>
<p>This object is a representation of the JSP page through its entire lifecycle. This object is created when the JSP page is initialized and will be removed when the JSP page is removed by the jspDestroy() method.</p> 
</div>
</section>
<section class="toggle">
<label> What is a config Object?</label> 
<div class="toggle-content">
<p>The config object is an instantiation of javax.servlet.ServletConfig and is a direct wrapper around the ServletConfig object for the generated servlet.</p>
<p>This object allows the JSP programmer access to the Servlet or JSP engine initialization parameters such as the paths or file locations etc.</p> 
</div>
</section>
<section class="toggle">
<label> What is a pageContext Object?</label> 
<div class="toggle-content">
<p>The pageContext object is an instance of a javax.servlet.jsp.PageContext object. The pageContext object is used to represent the entire JSP page.</p>
<p>This object stores references to the request and response objects for each request. The application, config, session, and out objects are derived by accessing attributes of this object.</p>
<p>The pageContext object also contains information about the directives issued to the JSP page, including the buffering information, the errorPageURL, and page scope.</p> 
</div>
</section>
<section class="toggle">
<label> What is a page object?</label> 
<div class="toggle-content">
<p>This object is an actual reference to the instance of the page. It can be thought of as an object that represents the entire JSP page.</p>
<p>The page object is really a direct synonym for the this object.</p> 
</div>
</section>
<section class="toggle">
<label> What is an exception Object?</label> 
<div class="toggle-content">
<p>The exception object is a wrapper containing the exception thrown from the previous page. It is typically used to generate an appropriate response to the error condition.</p> 
</div>
</section>
<section class="toggle">
<label> What is difference between GET and POST method in HTTP protocol?</label> 
<div class="toggle-content">
<p>The GET method sends the encoded user information appended to the page request. The page and the encoded information are separated by the ? Character.</p>
<p>The POST  method packages the information in exactly the same way as GET methods, but instead of sending it as a text string after a ? in the URL it sends it as a separate message. This message comes to the backend program in the form of the standard input which you can parse and use for your processing.</p> 
</div>
</section>
<section class="toggle">
<label> How to read form data using JSP?</label> 
<div class="toggle-content">
<p>JSP handles form data parsing automatically using the following methods depending on the situation &minus;</p>
<ul class="list">
<li><p><b>getParameter()</b> &minus; You call request.getParameter() method to get the value of a form parameter.</p></li>
<li><p><b>getParameterValues()</b> &minus; Call this method if the parameter appears more than once and returns multiple values, for example checkbox.</p></li>
<li><p><b>getParameterNames()</b> &minus; Call this method if you want a complete list of all parameters in the current request.</p></li>
<li><p><b>getInputStream()</b> &minus; Call this method to read binary data stream coming from the client.</p></li>
</ul> 
</div>
</section>
<section class="toggle">
<label> What are filters?</label> 
<div class="toggle-content">
<p>JSP Filters are Java classes that can be used in JSP Programming for the following purposes &minus;</p>
<ul class="list">
<li><p>To intercept requests from a client before they access a resource at back end.</p></li>
<li><p>To manipulate responses from server before they are sent back to the client.</p></li>
</ul> 
</div>
</section>
<section class="toggle">
<label> How do you define filters?</label> 
<div class="toggle-content">
<p>Filters are defined in the deployment descriptor file web.xml and then mapped to either servlet or JSP names or URL patterns in your application's deployment descriptor.</p>
<p>When the JSP container starts up your web application, it creates an instance of each filter that you have declared in the deployment descriptor. The filters execute in the order that they are declared in the deployment descriptor.</p> 
</div>
</section>
<section class="toggle">
<label> What are cookies?</label> 
<div class="toggle-content">
<p>Cookies are text files stored on the client computer and they are kept for various information tracking purpose.</p> 
</div>
</section>
<section class="toggle">
<label> How cookies work?</label> 
<div class="toggle-content">
<p>Cookies are usually set in an HTTP header (although JavaScript can also set a cookie directly on a browser).If the browser is configured to store cookies, it will then keep this information until the expiry date. If the user points the browser at any page that matches the path and domain of the cookie, it will resend the cookie to the server.</p> 
</div>
</section>
<section class="toggle">
<label> How do you set cookies in the JSP?</label> 
<div class="toggle-content">
<p>Setting cookies with JSP involves three steps &minus;</p>
<ul class="list">
<li><p><b>Creating a Cookie object</b> &minus; You call the Cookie constructor with a cookie name and a cookie value, both of which are strings.</p></li>
<li><p><b>Setting the maximum age</b> &minus; You use setMaxAge to specify how long (in seconds) the cookie should be valid.</p></li>
<li><p><b>Sending the Cookie into the HTTP response headers</b> &minus; You use response.addCookie to add cookies in the HTTP response header</p></li>
</ul> 
</div>
</section>
<section class="toggle">
<label> How to read cookies with JSP?</label> 
<div class="toggle-content">
<p>To read cookies, you need to create an array of javax.servlet.http.Cookie objects by calling the getCookies( ) method of HttpServletRequest. Then cycle through the array, and use getName() and getValue() methods to access each cookie and associated value.</p> 
</div>
</section>
<section class="toggle">
<label> How to delete cookies with JSP?</label> 
<div class="toggle-content">
<p>To delete cookies is very simple. If you want to delete a cookie then you simply need to follow up following three steps &minus;</p>
<ul class="list">
<li><p>Read an already existing  cookie and store it in Cookie object.</p></li>
<li><p>Set cookie age as zero using <b>setMaxAge()</b> method to delete an existing cookie.</p></li>
<li><p>Add this cookie back into response header.</p></li>
</ul> 
</div>
</section>
<section class="toggle">
<label> How is Session Management done in JSP?</label> 
<div class="toggle-content">
<p>Session management can be achieved by the use of &minus;</p>
<ul class="list">
<li><p><b>Cookies</b> &minus; A webserver can assign a unique session ID as a cookie to each web client and for subsequent requests from the client they can be recognized using the received cookie.</p></li>
<li><p><b>Hidden Form Fields</b> &minus; A web server can send a hidden HTML form field along with a unique session ID as follows &minus;</p></li>
</ul>
<pre class="prettyprint notranslate">
&lt;input type = "hidden" name = "sessionid" value = "12345"&gt;
</pre>
<ul class="list">
<p>This implies that when the form is submitted, the specified name and value will be getting included in GET or POST method.</p>
<li><p><b>URL Rewriting</b> &minus; In URL rewriting some extra information is added on the end of each URL that identifies the session. This URL rewriting can be useful where a cookie is disabled.</p></li>
<li><p><b>The session Object</b> &minus; JSP makes use of servlet provided HttpSession Interface which provides a way to identify a user across more than one page request or visit to a Web site and to store information about that user.</p></li>
</ul> 
</div>
</section>
<section class="toggle">
<label> How can you delete a session data?</label> 
<div class="toggle-content">
<p>When you are done with a user's session data, you have several options &minus;</p>
<ul class="list">
<li><p><b>Remove a particular attribute</b> &minus;  You can call <i>public void removeAttribute(String name)</i> method to delete the value associated with the a particular key.</p></li>
<li><p><b>Delete the whole session</b> &minus; You can call <i>public void invalidate()</i> method to discard an entire session.</p></li>
<li><p><b>Setting Session timeout</b> &minus; You can call <i>public void setMaxInactiveInterval(int interval)</i> method to set the timeout for a session individually.</p></li>
<li><p><b>Log the user out</b> &minus; The servers that support servlets 2.4, you can call <b>logout</b> to log the client out of the Web server and invalidate all sessions belonging to all the users.</p></li>
<li><p><b>web.xml Configuration</b> &minus; If you are using Tomcat, apart from the above mentioned methods, you can configure session time out in web.xml file as follows.</p></li>
</ul> 
</div>
</section>
<section class="toggle">
<label> How can you upload a file using JSP?</label> 
<div class="toggle-content">
<p>To upload a single file you should use a single &lt;input .../&gt; tag with attribute type = "file".To allow multiple files uploading, include more than one input tags with different values for the name attribute.</p> 
</div>
</section>
<section class="toggle">
<label> Where will be the uploaded files stored?</label> 
<div class="toggle-content">
<p>You can hard code this in your program or this directory name could also be added using an external configuration such as a context-param element in web.xml.</p> 
</div>
</section>
<section class="toggle">
<label> What is JSP page redirection?</label> 
<div class="toggle-content">
<p>Page redirection is generally used when a document moves to a new location and we need to send the client to this new location or may be because of load balancing, or for simple randomization.</p> 
</div>
</section>
<section class="toggle">
<label> What is the difference between &lt;jsp:forward page = ... &gt; and response.sendRedirect(url)?</label> 
<div class="toggle-content">
<p>The &lt;jsp:forward&gt; element forwards the request object containing the client request information from one JSP file to another file. The target file can be an HTML file, another JSP file, or a servlet, as long as it is in the same application context as the forwarding JSP file.</p>
<p>sendRedirect sends HTTP temporary redirect response to the browser, and browser creates a new request to go the redirected page.</p> 
</div>
</section>
<section class="toggle">
<label> What is a hit count for a Webpage?</label> 
<div class="toggle-content">
<p>A hit counter tells you about the number of visits on a particular page of your web site.</p> 
</div>
</section>
<section class="toggle">
<label> How do you implement hit counter in JSP?</label> 
<div class="toggle-content">
<p>To implement a hit counter you can make use of Application Implicit object and associated methods getAttribute() and setAttribute().</p>
<p>This object is a representation of the JSP page through its entire lifecycle. This object is created when the JSP page is initialized and will be removed when the JSP page is removed by the jspDestroy() method.</p> 
</div>
</section>
<section class="toggle">
<label> How can you implement hit counter to avoid loss of count data with each restart of the application?</label> 
<div class="toggle-content">
<p>You can follow the below steps &minus;</p>
<ul class="list">
<li><p>Define a database table with a single count, let us say hitcount. Assign a zero value to it.</p></li>
<li><p>With every hit, read the table to get the value of hitcount.</p></li>
<li><p>Increase the value of hitcount by one and update the table with new value.</p></li>
<li><p>Display new value of hitcount as total page hit counts.</p></li>
<li><p>If you want to count hits for all the pages, implement above logic for all the pages.</p></li>
</ul> 
</div>
</section>
<section class="toggle">
<label> What is auto refresh feature?</label> 
<div class="toggle-content">
<p>Consider a webpage which is displaying live game score or stock market status or currency exchange ration. For all such type of pages, you would need to refresh your Webpage regularly using refresh or reload button with your browser.</p>
<p>JSP makes this job easy by providing you a mechanism where you can make a webpage in such a way that it would refresh automatically after a given interval.</p> 
</div>
</section>
<section class="toggle">
<label> How do you implement the auto refresh in JSP?</label> 
<div class="toggle-content">
<p>The simplest way of refreshing a Webpage is using method setIntHeader() of response object. Following is the signature of this method &minus;</p>
<pre class="prettyprint notranslate">
public void setIntHeader(String header, int headerValue)
</pre>
<p>This method sends back header "Refresh" to the browser along with an integer value which indicates time interval in seconds.</p> 
</div>
</section>
<section class="toggle">
<label> What is JSTL?</label> 
<div class="toggle-content">
<p>The JavaServer Pages Standard Tag Library (JSTL) is a collection of useful JSP tags which encapsulates core functionality common to many JSP applications.</p>
<p>JSTL has support for common, structural tasks such as iteration and conditionals, tags for manipulating XML documents, internationalization tags, and SQL tags. It also provides a framework for integrating existing custom tags with JSTL tags.</p> 
</div>
</section>
<section class="toggle">
<label> What the different types of JSTL tags are ?</label> 
<div class="toggle-content">
<p>Types of JSTL tags are &minus;</p>
<ul class="list">
<li><p><b>Core Tags</b></p></li>
<li><p><b>Formatting tags</b></p></li>
<li><p><b>SQL tags</b></p></li>
<li><p><b>XML tags</b></p></li>
<li><p><b>JSTL Functions</b></p></li>
</ul> 
</div>
</section>
<section class="toggle">
<label> What is the use of &lt;c:set &gt; tag?</label> 
<div class="toggle-content">
<p>The &lt;c:set &gt; tag is JSTL-friendly version of the setProperty action. The tag is helpful because it evaluates an expression and uses the results to set a value of a JavaBean or a java.util.Map object.</p> 
</div>
</section>
<section class="toggle">
<label> What is the use of &lt;c:remove &gt; tag?</label> 
<div class="toggle-content">
<p>The &lt;c:remove &gt; tag removes a variable from either a specified scope or the first scope where the variable is found (if no scope is specified).</p> 
</div>
</section>
<section class="toggle">
<label> What is the use of &lt;c:catch&gt; tag?</label> 
<div class="toggle-content">
<p>The &lt;c:catch&gt; tag catches any Throwable that occurs in its body and optionally exposes it. Simply it is used for error handling and to deal more gracefully with the problem.</p> 
</div>
</section>
<section class="toggle">
<label> What is the use of &lt;c:if&gt; tag?</label> 
<div class="toggle-content">
<p>The &lt;c:if&gt; tag evaluates an expression and displays its body content only if the expression evaluates to true.</p> 
</div>
</section>
<section class="toggle">
<label> What is the use of &lt;c:choose&gt; tag?</label> 
<div class="toggle-content">
<p>The &lt;c:choose&gt; works like a Java switch statement in that it lets you choose between a number of alternatives. Where the switch statement has case statements, the &lt;c:choose&gt; tag has &lt;c:when&gt; tags. A a switch statement has default clause to specify a default action and similar way &lt;c:choose&gt; has &lt;otherwise&gt; as default clause.</p> 
</div>
</section>
<section class="toggle">
<label> What is the use of &lt;c:forEach &gt;, &lt;c:forTokens&gt; tag?</label> 
<div class="toggle-content">
<p>The &lt;c:forEach &gt;, &lt;c:forTokens&gt; tags exist as a good alternative to embedding a Java for, while, or do-while loop via a scriptlet.</p> 
</div>
</section>
<section class="toggle">
<label> What is the use of &lt;c:param&gt; tag?</label> 
<div class="toggle-content">
<p>The &lt;c:param&gt; tag allows proper URL request parameter to be specified with URL and it does any necessary URL encoding required.</p> 
</div>
</section>
<section class="toggle">
<label> What is the use of &lt;c:redirect &gt; tag?</label> 
<div class="toggle-content">
<p>The &lt;c:redirect &gt; tag redirects the browser to an alternate URL by providing automatically URL rewriting, it supports context-relative URLs, and it supports the &lt;c:param&gt; tag.</p> 
</div>
</section>
<section class="toggle">
<label> What is the use of &lt;c:url&gt; tag?</label> 
<div class="toggle-content">
<p>The &lt;c:url&gt; tag formats a URL into a string and stores it into a variable. This tag automatically performs URL rewriting when necessary.</p> 
</div>
</section>
<section class="toggle">
<label> What are JSTL formatting tags ?</label> 
<div class="toggle-content">
<p>The JSTL formatting tags are used to format and display text, the date, the time, and numbers for internationalized Web sites. Following is the syntax to include Formatting library in your JSP &minus;</p>
<pre class="prettyprint notranslate">
&lt;%@ taglib prefix = "fmt" uri = "http://java.sun.com/jsp/jstl/fmt" %&gt;
</pre> 
</div>
</section>
<section class="toggle">
<label> What are JSTL SQL tags?</label> 
<div class="toggle-content">
<p>The JSTL SQL tag library provides tags for interacting with relational databases (RDBMSs) such as Oracle, mySQL, or Microsoft SQL Server.</p>
<p>Following is the syntax to include JSTL SQL library in your JSP &minus;</p>
<pre class="result notranslate">
&lt;%@ taglib prefix = "sql" uri = "http://java.sun.com/jsp/jstl/sql" %&gt;
</pre> 
</div>
</section>
<section class="toggle">
<label> What are JSTL XML tags?</label> 
<div class="toggle-content">
<p>The JSTL XML tags provide a JSP-centric way of creating and manipulating XML documents. Following is the syntax to include JSTL XML library in your JSP.</p>
<pre class="prettyprint notranslate">
&lt;%@ taglib prefix = "x" uri = "http://java.sun.com/jsp/jstl/xml" %&gt;
</pre> 
</div>
</section>
<section class="toggle">
<label> What is a JSP custom tag?</label> 
<div class="toggle-content">
<p>A custom tag is a user-defined JSP language element. When a JSP page containing a custom tag is translated into a servlet, the tag is converted to operations on an object called a tag handler. The Web container then invokes those operations when the JSP page's servlet is executed.</p> 
</div>
</section>
<section class="toggle">
<label> What is JSP Expression Language?</label> 
<div class="toggle-content">
<p>JSP Expression Language (EL) makes it possible to easily access application data stored in JavaBeans components. JSP EL allows you to create expressions both (a) arithmetic and (b) logical. A simple syntax for JSP EL is  &minus;</p>
<pre class="result notranslate"> 
${expr}
</pre> 
<p>Here expr specifies the expression itself.</p> 
</div>
</section>
<section class="toggle">
<label> What are the implicit EL objects in JSP ?</label> 
<div class="toggle-content">
<p>The JSP expression language supports the following implicit objects &minus;</p>
<ul class="list">
<li><p><b>pageScope</b> &minus; Scoped variables from page scope</p></li>
<li><p><b>requestScope</b> &minus; Scoped variables from request scope</p></li>
<li><p><b>sessionScope</b> &minus; Scoped variables from session scope</p></li>
<li><p><b>applicationScope</b> &minus; Scoped variables from application scope</p></li>
<li><p><b>param</b> &minus; Request parameters as strings</p></li>
<li><p><b>paramValues</b> &minus; Request parameters as collections of strings</p></li>
<li><p><b>headerHTTP</b> &minus; request headers as strings</p></li>
<li><p><b>headerValues</b> &minus; HTTP request headers as collections of strings</p></li>
<li><p><b>initParam</b> &minus; Context-initialization parameters</p></li>
<li><p><b>cookie</b> &minus; Cookie values</p></li>
<li><p><b>pageContext</b> &minus; The JSP PageContext object for the current page</p></li>
</ul> 
</div>
</section>
<section class="toggle">
<label> How can we disable EL ?</label> 
<div class="toggle-content">
<p>We can disable using isELIgnored attribute of the page directive &minus;</p>
<pre class="result notranslate">
&lt;%@ page isELIgnored = "true|false" %&gt;
</pre>
<p>If it is true, EL expressions are ignored when they appear in static text or tag attributes. If it is false, EL expressions are evaluated by the container.</p> 
</div>
</section>
<section class="toggle">
<label> What type of errors you might encounter in a JSP code?</label> 
<div class="toggle-content">
<ul class="list">
<li><p><b>Checked exceptions</b> &minus; Achecked exception is an exception that is typically a user error or a problem that cannot be foreseen by the programmer. For example, if a file is to be opened, but the file cannot be found, an exception occurs. These exceptions cannot simply be ignored at the time of compilation.</p></li>
<li><p><b>Runtime exceptions</b> &minus; A runtime exception is an exception that occurs that probably could have been avoided by the programmer. As opposed to checked exceptions, runtime exceptions are ignored at the time of compliation.</p></li>
<li><p><b>Errors</b> &minus; These are not exceptions at all, but problems that arise beyond the control of the user or the programmer. Errors are typically ignored in your code because you can rarely do anything about an error. For example, if a stack overflow occurs, an error will arise. They are also ignored at the time of compilation.</p></li>
</ul> 
</div>
</section>
<section class="toggle">
<label> In JSP page how can we handle runtime exception?</label> 
<div class="toggle-content">
<p>We can use the errorPage attribute of the page directive to have uncaught run-time exceptions automatically forwarded to an error processing page.</p>
<p>Example: &lt;%@ page errorPage = "error.jsp" %&gt;</p>
<p>It will redirect the browser to the JSP page error.jsp if an uncaught exception is encountered during request processing. Within error.jsp, will have to indicate that it is an error-processing page, using the directive: &lt;%@ page isErrorPage="true" %&gt;</p> 
</div>
</section>
<section class="toggle">
<label> What is Internationalization?</label> 
<div class="toggle-content">
<p>Internationalization means enabling a web site to provide different versions of content translated into the visitor's language or nationality.</p> 
</div>
</section>
<section class="toggle">
<label> What is Localization?</label> 
<div class="toggle-content">
<p>Localization means adding resources to a web site to adapt it to a particular geographical or cultural region for example Hindi translation to a web site.</p> 
</div>
</section>
<section class="toggle">
<label> What is locale?</label> 
<div class="toggle-content">
<p>This is a particular cultural or geographical region. It is usually referred to as a language symbol followed by a country symbol which are separated by an underscore. For example "en_US" represents english locale for US.</p> 
</div>
</section>
<section class="toggle">
<label> What is difference between &lt;%-- comment --%&gt; and &lt;!-- comment --&gt;?</label> 
<div class="toggle-content">
<p>&lt;%-- comment --%&gt; is JSP comment and is ignored by the JSP engine.</p>
<p>&lt;!-- comment --&gt; is an HTML comment and is ignored by the browser.</p>
</div>
</section>
<section class="toggle">
<label> Is JSP technology extensible?</label> 
<div class="toggle-content">
<p>YES. JSP technology is extensible through the development of custom actions, or tags, which are encapsulated in tag libraries.</p>
</div>
</section>
<section class="toggle">
<label> How do I include static files within a JSP page?</label> 
<div class="toggle-content">
<p>Static resources should always be included using the JSP <b>include directive</b>. This way, the inclusion is performed just once during the translation phase. Do note that you should always supply a relative URL for the file attribute. Although you can also include static resources using the action, this is not advisable as the inclusion is then performed for each and every request.</p>
</div>
</section>
<section class="toggle">
<label> Can a JSP page process HTML FORM data?</label> 
<div class="toggle-content">
<p>Yes. However, unlike Servlet, you are not required to implement HTTP-protocol specific methods like doGet() or doPost() within your JSP page. You can obtain the data for the FORM input elements via the request implicit object within a scriptlet or expression.</p>
</div>
</section>
<section class="toggle">
<label> How do you pass control from one JSP page to another?</label> 
<div class="toggle-content">
<p>Use the following ways to pass control of a request from one servlet to another or one jsp to another &minus;</p>
<ul class="list">
<li><p>The RequestDispatcher object ‘s forward method to pass the control.</p></li>
<li><p>Using the <i>response.sendRedirect</i> method.</p></li>
</ul>
</div>
</section>
<section class="toggle">
<label> Can you make use of a ServletOutputStream object from within a JSP page?</label> 
<div class="toggle-content">
<p>No. You are supposed to make use of only a JSPWriter object (given to you in the form of the implicit object out) for replying to clients.</p>
<p>A JSPWriter can be viewed as a buffered version of the stream object returned by response.getWriter(), although from an implementational perspective, it is not.</p>
</div>
</section>
<section class="toggle">
<label> What is the page directive is used to prevent a JSP page from automatically creating a session?</label> 
<div class="toggle-content">
<p>&lt;%@ page session = "false"&gt;</p>
</div>
</section>
<section class="toggle">
<label> How to pass information from JSP to included JSP?</label> 
<div class="toggle-content">
<p>Using &lt;%jsp:param&gt; tag.</p>
</div>
</section>
<section class="toggle">
<label> Can we override the jspInit(), _jspService() and jspDestroy() methods?</label> 
<div class="toggle-content">
<p>We can override jspinit() and jspDestroy() methods but not _jspService().</p>
</div>
</section>
<section class="toggle">
<label> Why is _jspService() method starting with an '_' while other life cycle methods do not?</label> 
<div class="toggle-content">
<p>_jspService() method will be written by the container hence any methods which are not to be overridden by the end user are typically written starting with an '_'. This is the reason why we don't override _jspService() method in any JSP page.</p>
</div>
</section>
<section class="toggle">
<label> A JSP page, <i>include.jsp</i>, has a instance variable "int a", now this page is statically included in another JSP page, home.jsp, which also has an instance variable "int a" declared. What happens when the home.jsp page is requested by the client?</label> 
<div class="toggle-content">
<p>It causes compilation error, as two variables with same name can't be declared. This happens because, when a page is included statically, entire code of included page becomes part of the new page. at this time there are two declarations of variable 'a'. Hence compilation error.</p>
</div>
</section>
<section class="toggle">
<label> How is scripting disabled?</label> 
<div class="toggle-content">
<p>Scripting is disabled by setting the scripting-invalid element of the deployment descriptor to true. It is a subelement of jsp-property-group. Its valid values are true and false. The syntax for disabling scripting is as follows &minus;</p>
<pre class="prettyprint notranslate">
&lt;jsp-property-group&gt;
   &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;
   &lt;scripting-invalid&gt;true&lt;/scripting-invalid&gt;
&lt;/jsp-property-group&gt;
</pre>
</div>
</section>
<section class="toggle">
<label> When do use application scope?</label> 
<div class="toggle-content">
<p>If we want to make our data available to the entire application then we have to use application scope.</p>
</div>
</section>
<section class="toggle">
<label> What are the options in JSP to include files?</label> 
<div class="toggle-content">
<p>In JSP, we can perform inclusion in the following ways &minus;</p>
<ul class="list">
<li><p><b>By include directive</b> &minus; For example &minus;</p></li>
</ul>
<pre class="result notranslate">
&lt;%@ include file = ”header.jsp” %&gt;
</pre>
<ul class="list">
<li><p><b>By include action</b> &minus; For example &minus;</p></li>
</ul>
<pre class="result notranslate">
&lt;%@ include file = ”header.jsp” %&gt;
</pre>
<ul class="list">
<li><p><b>By using pageContext implicit object</b> For example &minus;</p></li>
</ul>
<pre class="result notranslate">
&lt;% pageContext.include(“/header.jsp”); %&gt;
</pre>
<ul class="list">
<li><p><b>By using RequestDispatcher object</b> &minus; For example &minus;</p></li>
</ul>
<pre class="result notranslate">
&lt;%
 RequestDispatcher rd = request.getRequestDispatcher(“/header.jsp”);
 Rd.include(request,response);
%&gt;
</pre>
</div>
</section>
<section class="toggle">
<label> How does JSP engines instantiate tag handler classes instances?</label> 
<div class="toggle-content">
<p>JSP engines will always instantiate a new tag handler instance every time a tag is encountered in a JSP page. A pool of tag instances are maintained and reusing them where possible. When a tag is encountered, the JSP engine will try to find a Tag instance that is not being used and use the same and then release it.</p>
</div>
</section>
<section class="toggle">
<label> What’s the difference between JavaBeans and taglib directives?</label> 
<div class="toggle-content">
<p>JavaBeans and taglib fundamentals were introduced for reusability. But following are the major differences between them &minus;</p>
<ul class="list">
<li><p>Taglibs are for generating presentation elements while JavaBeans are good for storing information and state.</p></li>
<li><p>Use custom tags to implement actions and JavaBeans to present information.</p></li>
</ul>
</div>
</section>
<h2>What is Next ?</h2>
<p>Further you can go through your past assignments you have done with the subject and make sure you are able to speak confidently on them. If you are fresher then interviewer does not expect you will answer very complex questions, rather you have to make your basics concepts very strong.</p>
<p>Second it really doesn't matter much if you could not answer few questions but it matters that whatever you answered, you must have answered with confidence. So just feel confident during your interview. We at tutorialspoint wish you best luck to have a good interviewer and all the very best for your future endeavor. Cheers :-)</p>
<div class="parent-file">jsp_questions_answers.htm</div>
<div class="mui-container-fluid button-borders show" id="bottom_navigation">
<div class="pre-btn">
<a href="jsp_questions_answers.htm"><i class="fal fa-chevron-circle-left"></i> Previous Page</a>
<a class="hide-on-mobile" href="javascript:printPage();"><i class="fa fa-print"></i> Print Page</a>
</div>
<div class="nxt-btn">
<a href="jsp_questions_answers.htm">Next Page <i class="fal fa-chevron-circle-right"></i>&nbsp;</a>
</div>
</div>
<div class="google-bottom-ads">
<div>Advertisements</div>
<div id="adp_bottom_ads"></div>
<script>
var adPos = document.getElementById('adp_bottom_ads');
var mobile_ad_id = "a8a632a6-046e-4f5c-b25f-8bc82ac89fb2";
var desktop_ad_id = "e7ddd6f7-1ab0-494a-bade-887daa4373a0";
var adpushup = adpushup || {};
adpushup.que = adpushup.que || [];
adpushup.que.push(function() {
var ad_id = window.innerWidth <= 768 ? mobile_ad_id : desktop_ad_id;
adPos.innerHTML = '<div id="' + ad_id + '" class="_ap_apex_ad"></div>';
adpushup.triggerAd(ad_id);
});
</script>
<div class="space-bottom"></div>
</div>
</div>
<!-- Tutorial Content Ends Here -->
<!-- Right Column Starts Here -->
<div class="mui-col-md-2 google-right-ads">
<div class="space-top"></div>
<div class="google-right-ad" id="ad300" style="margin: 0px auto !important;margin-top:5px;">
<div id="f0f6cff6-393d-4170-b63a-d9ff06ca9f25" class="_ap_apex_ad">
<script>
var adpushup = adpushup || {};
adpushup.que = adpushup.que || [];
adpushup.que.push(function() {
adpushup.triggerAd("f0f6cff6-393d-4170-b63a-d9ff06ca9f25");
});
</script>
</div>
</div>
<div class="google-right-ad" style="margin-top:16px;">
<div id="5c0affd5-724a-475c-bfcd-cecbc7660c36" class="_ap_apex_ad">
<script>
var adpushup = adpushup || {};
adpushup.que = adpushup.que || [];
adpushup.que.push(function() {
adpushup.triggerAd("5c0affd5-724a-475c-bfcd-cecbc7660c36");
});
</script>
</div>
</div>
<div class="space-bottom"></div>

<div class="google-right-ad" style="margin-top:16px;margin-bottom:15px;">
<div id="8f8814c2-d64c-4d26-9cb9-543653c0b48f" class="_ap_apex_ad">
<script>
var adpushup = adpushup || {};
adpushup.que = adpushup.que || [];
adpushup.que.push(function() {
adpushup.triggerAd("8f8814c2-d64c-4d26-9cb9-543653c0b48f");
});
</script>
</div>
</div>
</div>
</div>
<!-- Right Column Ends Here -->
</div>
</div>
<div class="clear"></div>
<footer id="footer">
<div class="mui--text-center">
<div class="mui--text-caption mui--text-light">
<a href="/index.htm" class="logo"><img class="img-responsive" src="/images/logo-black.png" alt="Tutorials Point" title="Tutorials Point"></a>
</div>
<ul class="mui-list--inline mui--text-body2 mui--text-light">
<li><a href="/about/index.htm"><i class="fal fa-globe"></i> About us</a></li>
<li><a href="/about/about_terms_of_use.htm"><i class="fal fa-asterisk"></i> Terms of use</a></li>
<li><a href="/about/about_privacy.htm"> <i class="fal fa-shield-check"></i> Privacy Policy</a></li>
<li><a href="/about/faq.htm"><i class="fal fa-question-circle"></i> FAQ's</a></li>
<li><a href="/about/about_helping.htm"><i class="fal fa-hands-helping"></i> Helping</a></li>
<li><a href="/about/contact_us.htm"><i class="fal fa-map-marker-alt"></i> Contact</a></li>
</ul>
<div class="mui--text-caption mui--text-light bottom-copyright-text">&copy; Copyright 2020. All Rights Reserved.</div>
</div>
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-232293-17"></script>
<script>
window.dataLayer = window.dataLayer || [];
function gtag(){dataLayer.push(arguments);}
gtag('js', new Date());
gtag('config', 'UA-232293-6');
</script>
</footer>
</body>
</html>

